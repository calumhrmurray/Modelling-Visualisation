import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.util.Timer;
import java.util.TimerTask;

class Test {	// -------------------------------------------------------------
    static void init(final BufferedImage bi) {
	update(bi);
    }

    static final double tPI = 2.0*Math.PI;
    static void update(final BufferedImage bi) {
	final int w = bi.getWidth();
	final int h = bi.getHeight();
	final int x = w/2;
	final int y = h/2;
	final Graphics2D g = bi.createGraphics();
	g.clearRect(0, 0, w, h);
	for (int i = 0; i <= w; i += 20) for (int j = 0; j <= h; j += 20) drawArrow(g, i, j, 10.0, tPI);
    }
	//----------------------------------------------------------------------

	public static void main(final String[] args) throws Exception {
		if (args.length != 3) throw new Exception("Arguments: width[pixels] height[pixels] period[milliseconds]");
		final int W = Integer.parseInt(args[0]);
		final int H = Integer.parseInt(args[1]);
		final long P = Long.parseLong(args[2]);

		final BufferedImage bi = new BufferedImage(W, H, BufferedImage.TYPE_INT_RGB);
		final Object lock = new Object();
		final Frame f = new Frame();
		f.setIgnoreRepaint(true);
		f.setTitle("Animate " + args[0] + " " + args[1] + " " + args[2]);
		f.setVisible(true);
		f.setSize(W, H + f.getInsets().top);
		f.setExtendedState(Frame.MAXIMIZED_BOTH);
		f.addWindowListener(new WindowAdapter() {public void windowClosing(WindowEvent we) {System.exit(0);}});

		init(bi);
		new Timer().scheduleAtFixedRate(new TimerTask() {public void run() {synchronized(lock) {f.getGraphics().drawImage(bi, 0, f.getInsets().top, f.getWidth(), f.getHeight() - f.getInsets().top, null);}}}, 0, 33);
		new Timer().scheduleAtFixedRate(new TimerTask() {public void run() {synchronized(lock) {update(bi);}}}, 0, P);
	}

    static final double qPI = 0.25*Math.PI;
    static void drawArrow(final Graphics2D g, final int x1, final int y1, final double l1, final double a) {
	final int x2 = x1 + (int)Math.round(l1*Math.cos(a));
	final int y2 = y1 + (int)Math.round(l1*Math.sin(a));
	g.drawLine(x1, y1, x2, y2);// tail
	final double l2 = 0.5*l1;
	final double am = a - qPI;
	final double ap = a + qPI;
	// tip:
	g.drawLine(x2, y2, x2 - (int)Math.round(l2*Math.cos(am)), y2 - (int)Math.round(l2*Math.sin(am)));
	g.drawLine(x2, y2, x2 - (int)Math.round(l2*Math.cos(ap)), y2 - (int)Math.round(l2*Math.sin(ap)));
    }
}


